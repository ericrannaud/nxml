#!/usr/bin/env python

import os
import os.path
import sys
import re
import xml.etree.ElementTree as et

class SyntaxError(Exception):
  pass

TBLOCK = r'//([\w][\w:]*)[ \t]*'
TCLOSE = r'//'
TATTR = r"([\w][\w:.]*)=(?:\'((?:[^']|\\')*)\'|(\S+))[ \t]*"
TATTR_SINGLE = r"(\w+)[ \t]*"
TOPEN = r'/'
TEOL = r'[ \t\r]*\n+( *)'
# Must be last.
TANY = r'[^/\n]+'
tokens = [TBLOCK, TCLOSE, TOPEN, TEOL, TANY]
attrs = [TATTR, TATTR_SINGLE]

def token(input):
  for t in tokens:
    m = re.match(t, input)
    if m is not None:
      return t, m
  return None, None

def attr(input):
  for t in attrs:
    m = re.match(t, input)
    if m is not None:
      return t, m
  return None, None

def adv(input, m):
  if m is None:
    return input
  return input[len(m.group(0)):]

def rew(input, m):
  return m.group(0) + input

def block(indent, builder, input):
  tok, m = token(input)
  if m is None or tok != TBLOCK:
    return input
  input = adv(input, m)

  tag = m.group(1)
  el = builder.start(tag, {})

  while True:
    tok, m = attr(input)
    if tok is None:
      break

    input = adv(input, m)

    if tok == TATTR:
      el.set(m.group(1), m.group(2))
    else:
      el.set(m.group(1), '')

  tok, m = token(input)
  input = adv(input, m)
  if tok == TOPEN:
    indent += 2  # Can continue on next line.
  elif tok == TEOL:
    builder.data(m.group(0))
    if len(m.group(1)) > indent:
      # Equivalent to TOPEN.
      indent = len(m.group(1))
    else:
      builder.end(tag)
      return input
  elif tok == TCLOSE:
    builder.end(tag)
    return input

  while True:
    tok, m = token(input)
    if tok is None:
      break
    input = adv(input, m)

    if tok == TBLOCK:
      # Sub block.
      input = rew(input, m)
      input = block(indent, builder, input)

    elif tok == TCLOSE:
      break

    elif tok == TEOL and len(m.group(1)) < indent:
      builder.data(m.group(0))
      # Close.
      input = rew(input, m)
      break

    elif tok == TEOL:
      builder.data(m.group(0))
      # Continue content.
      continue

    elif tok == TANY:
      # Content.
      builder.data(m.group(0))

    else:
      raise Exception("Unexpected token '%s': '%s'" % (tok, m.group(0)))

  builder.end(tag)
  return input


if __name__ == '__main__':
  with open(sys.argv[1]) as f:
    input = f.read()

  builder = et.TreeBuilder()
  _ = block(0, builder, input)
  tree = et.ElementTree(builder.close())

  with open(sys.argv[2], 'w') as f:
    tree.write(f)
    print>>f
